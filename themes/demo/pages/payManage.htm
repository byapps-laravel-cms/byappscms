title = "결제관리"
url = "/pay/manage/:page"
layout = "default"
description = "결제 관리를 하실 수 있습니다"
is_hidden = 0
child_of = "mey_no_parent"
hide_crumb = 0
remove_crumb_trail = 0
crumb_disabled = 0

[builderList]
modelClass = "Jiwon\Byapps\Models\PaymentData"
scope = "-"
scopeValue = "{{ :scope }}"
displayColumn = "app_name"
noRecordsMessage = "No records found"
detailsPage = "payDetail"
detailsKeyColumn = "idx"
detailsUrlParameter = "idx"
recordsPerPage = 20
pageNumber = "{{ :page }}"
sortColumn = "idx"
sortDirection = "desc"

[session]
security = "user"
allowedUserGroups[] = "admin_level_1"
redirect = "permission"

[breadcrumbs]
main-ol-class = "breadcrumb"
active-class = "active"
disabled-class = "disabled"
==
<?php
use Jiwon\Byapps\Models\PayManage;

function onStart()
{
    $this['records'] = PayManage::orderBy('reg_time')->get();

    $this['func'] = new Class {
        public function dateFormat($val)
        {
           $dateString = date("Y-m-d", $val);
           return $dateString;
        }
    };

    $this['arrPaytype'] = array(
      0 => '신규', 1 => '연장', 2 => '충전', 3 => '추가', 4=> '기타'
    );
}
?>
==

{% set records = builderList.records %}
{% set displayColumn = builderList.displayColumn %}
{% set noRecordsMessage = builderList.noRecordsMessage %}
{% set detailsPage = builderList.detailsPage %}
{% set detailsKeyColumn = builderList.detailsKeyColumn %}
{% set detailsUrlParameter = builderList.detailsUrlParameter %}

<!-- <table id="example" class="table table-striped table-bordered" style="width:100%">
        <col width="40%">
        <col width="5%">
        <col width="30%">
        <col width="10%">
        <col width="15%">
        <thead>
            <tr>
                <th>앱명</th>
                <th>구분</th>
                <th>기간</th>
                <th>결제금액</th>
                <th>결제일</th>
            </tr>
        </thead>

        <tbody>
         {% for record in records %}
            <tr>
                <td >
                {% if detailsPage %}
                    <a href="{{ detailsPage|page({ (detailsUrlParameter): attribute(record, detailsKeyColumn) }) }}">
                {% endif %}

                {{ attribute(record, displayColumn) }}

                {% if detailsPage %}
                    </a>
                {% endif %}
                </td>

                <td>
                {% for key,val in arrPaytype %}
                  {{ key == record.pay_type ? val : "" }}
                {% endfor %}
                </td>

                <td>{{ record.term }}일 ({{ func.dateFormat(record.start_time) }} ~ {{ func.dateFormat(record.end_time) }})</td>
                <td>{{ record.amount | number_format(0, ',') }}</td>
                <td>{{ func.dateFormat(record.reg_time) }}</td>
            </tr>

         {% else %}
        <li class="no-data">{{ noRecordsMessage }}</li>
        {% endfor %}
        </tbody>
</table> -->

{% component 'breadcrumbs' %}
<div class="container">

  <div class="method">
      <div class="col-md-12 margin-5">
        <button id="download-xlsx" class="btn btn-info float-right mb-1">Download</button>
        <div id="paymentTable"></div>
        <br />
      </div>
  </div>
</div>

{% set paginationEnabled =
    records.currentPage > 1 or
    records.lastPage > 1 or
    records.lastPage > records.currentPage
%}

{% if paginationEnabled %}
    {# How many pages to display around the current page #}
    {% set n = 2 %}

    {% set currentPageZeroBased = records.currentPage-1 %}

    {% set pageLinks = [] %}
    {% set pageSet = [] %}

    {% set startOffset = max(currentPageZeroBased - n, 0) %}
    {% if (startOffset + 2*n+1) > (records.lastPage-1) %}
        {% set startOffset = max(records.lastPage - 2*n - 1, 0) %}
    {% endif %}

    {% for page in 1..records.lastPage %}
        {% set pageLinks = pageLinks|merge([page]) %}
    {% endfor %}

    {% set activeBlock = pageLinks|slice(startOffset, 2*n + 1) %}

    {% if startOffset > 0 %}
        {% set pageSet = pageSet|merge([1]) %}

        {% if startOffset > 1 %}
            {% set pageSet = pageSet|merge(['...']) %}
        {% endif %}
    {% endif %}

    {% set pageSet = pageSet|merge(activeBlock) %}

    {% set diffToEnd = (records.lastPage-1) - (startOffset + 2*n+1) + 1 %}

    {% if diffToEnd > 0 %}
        {% if diffToEnd > 1 %}
            {% set pageSet = pageSet|merge(['...']) %}
        {% endif %}

        {% set pageSet = pageSet|merge([records.lastPage]) %}
    {% endif %}

    <ul class="pagination pagination-sm justify-content-center">
        {% if records.currentPage > 1 %}
            <li class="page-item">
                <a class="page-link" href="{{ paginationUrl ~ (records.currentPage - 1) }}">
                    &larr; Previous
                </a>
            </li>
        {% else %}
            <li class="page-item disabled">
              <a class="page-link" href="#" tabindex="-1">Previous</a>
            </li>
        {% endif %}

        {% for page in pageSet %}
            {% if page == '...' %}
                <li class="page-item">
                    <a class="page-link">{{ page }}</a>
                </li>
            {% else %}
                <li class="page-item {{ page == records.currentPage ? 'active' }}">
                    <a class="page-link" href="{{ paginationUrl ~ page }}">{{ page }}</a>
                </li>
            {% endif %}
        {% endfor %}

        {% if records.lastPage > records.currentPage %}
            <li>
                <a class="page-link" href="{{ paginationUrl ~ (records.currentPage + 1) }}">
                    Next
                </a>
            </li>
        {% else %}
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="+1">Next</a>
            </li>
        {% endif %}
    </ul>
{% endif %}

<script>
var table = {{ records|json_encode()|raw }};
var URL = {{ detailsPage|page|json_encode()|raw }};
URL = URL.substring(0, URL.lastIndexOf('/')+1);

console.log(table['data']);

var dateFormatter = function(cell, formatterParams, onRendered) {
    //convert date to JS date object
    var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
    d.setUTCSeconds(cell.getValue());

    //format date to YYYY-MM-DD
    var month = '' + (d.getMonth() + 1);
    var day = '' + d.getDate();
    var year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
};

var table = new Tabulator("#paymentTable", {
 	height:1040, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
 	data:table['data'], //assign data to table
 	layout:"fitColumns", //fit columns to width of table (optional)
  responsiveLayout:true, // enable responsive layouts
  paginationDataReceived:{
      "last_page":"max_pages", //change last_page parameter name to "max_pages"
  },
  paginationSize: 20, //optional parameter to request a certain number of rows per page
 	columns:[ //Define Table Columns
	 	{ title:"앱명", field:"app_name" },
	 	{ title:"구분", field:"pay_type", headerFilter:true, headerFilterParams:{ values:{"0":"신규", "1":"연장", "2":""}},
      formatter:function(cell, formatterParams, onRendered){
        var arrPaytype = ['신규', '연장', '충전', '추가', '기타'];
        for (var key in arrPaytype) {
          if (cell.getValue() == key) {
            return arrPaytype[key];
          }
        }
      }
    },
	 	{ title:"기간", field:"term",  align:"center",
      formatter:function(cell, formatterParams, onRendered){
        return cell.getValue() + " 일"; //return the contents of the cell;
      }
    },
	 	{ title:"결제금액", field:"amount", align:"right", formatter:"money",
      formatterParams:{
        decimal:",",
        thousand:",",
        precision:false,
        symbol: " 원",
        symbolAfter: true
      },
    },
    { title:"등록일", field:"reg_time", sorter:"date", align:"center", formatter:dateFormatter }
 	],
 	rowClick:function(e, row){ //trigger an alert message when the row is clicked
    location.href = URL + row.getData().idx;
 	},
});

//trigger download of data.xlsx file
$("#download-xlsx").click(function(){
    table.download("xlsx", "data.xlsx", { sheetName:"My Data" });
});
</script>
