title = "test2"
url = "/test2/:page"
layout = "default"
is_hidden = 0
child_of = "mey_no_parent"
hide_crumb = 0
remove_crumb_trail = 0
crumb_disabled = 0

[builderList]
modelClass = "Jiwon\Byapps\Models\PaymentData"
scope = "-"
scopeValue = "{{ :scope }}"
displayColumn = "app_name"
noRecordsMessage = "No records found"
detailsPage = "payDetail"
detailsKeyColumn = "idx"
detailsUrlParameter = "idx"
recordsPerPage = 20
pageNumber = "{{ :page }}"
sortColumn = "idx"
sortDirection = "desc"
==
<?php
use Jiwon\Byapps\Models\PayManage;

function onStart()
{
    $this['records'] = PayManage::orderBy('reg_time')->get();

    $this['func'] = new Class {
        public function dateFormat($val)
        {
           $dateString = date("Y-m-d", $val);
           return $dateString;
        }
    };

    $this['arrPaytype'] = array(
      0 => '신규', 1 => '연장', 2 => '충전', 3 => '추가', 4=> '기타'
    );
}
?>
==
{% set records = builderList.records %}
{% set displayColumn = builderList.displayColumn %}
{% set noRecordsMessage = builderList.noRecordsMessage %}
{% set detailsPage = builderList.detailsPage %}
{% set detailsKeyColumn = builderList.detailsKeyColumn %}
{% set detailsUrlParameter = builderList.detailsUrlParameter %}
<!-- The form -->
<!-- <form data-request="onTest" data-request-update="calcresult: '#result'">
    <input type="text" value="15" name="value1">
    <select name="operation">
        <option>+</option>
        <option>-</option>
        <option>*</option>
        <option>/</option>
    </select>
    <input type="text" value="5" name="value2">
    <button type="submit">Calculate</button>
</form>
The result
<div id="result">
    {% partial "calcresult" %}
</div> -->

<div class="container">
  <div class="mb-5"><Br /></div>

  <div class="method">
      <div class="col-md-12 margin-5">
        <button id="download-xlsx" class="btn btn-info float-right mb-1">Download</button>
        <div id="example-table"></div>
        <br />
      </div>
  </div>
</div>

{% set paginationEnabled =
    records.currentPage > 1 or
    records.lastPage > 1 or
    records.lastPage > records.currentPage
%}

{% if paginationEnabled %}
    {# How many pages to display around the current page #}
    {% set n = 2 %}

    {% set currentPageZeroBased = records.currentPage-1 %}

    {% set pageLinks = [] %}
    {% set pageSet = [] %}

    {% set startOffset = max(currentPageZeroBased - n, 0) %}
    {% if (startOffset + 2*n+1) > (records.lastPage-1) %}
        {% set startOffset = max(records.lastPage - 2*n - 1, 0) %}
    {% endif %}

    {% for page in 1..records.lastPage %}
        {% set pageLinks = pageLinks|merge([page]) %}
    {% endfor %}

    {% set activeBlock = pageLinks|slice(startOffset, 2*n + 1) %}

    {% if startOffset > 0 %}
        {% set pageSet = pageSet|merge([1]) %}

        {% if startOffset > 1 %}
            {% set pageSet = pageSet|merge(['...']) %}
        {% endif %}
    {% endif %}

    {% set pageSet = pageSet|merge(activeBlock) %}

    {% set diffToEnd = (records.lastPage-1) - (startOffset + 2*n+1) + 1 %}

    {% if diffToEnd > 0 %}
        {% if diffToEnd > 1 %}
            {% set pageSet = pageSet|merge(['...']) %}
        {% endif %}

        {% set pageSet = pageSet|merge([records.lastPage]) %}
    {% endif %}

    <ul class="pagination">
        {% if records.currentPage > 1 %}
            <li>
                <a href="{{ paginationUrl ~ (records.currentPage - 1) }}">
                    &larr; Previous
                </a>
            </li>
        {% else %}
            <li class="disabled">
                <span>
                    &larr; Previous
                </span>
            </li>
        {% endif %}

        {% for page in pageSet %}
            {% if page == '...' %}
                <li class="interval">
                    <a>{{ page }}</a>
                </li>
            {% else %}
                <li class="{{ page == records.currentPage ? 'active' }}">
                    <a href="{{ paginationUrl ~ page }}">{{ page }}</a>
                </li>
            {% endif %}
        {% endfor %}

        {% if records.lastPage > records.currentPage %}
            <li>
                <a href="{{ paginationUrl ~ (records.currentPage + 1) }}">
                    Next &rarr;
                </a>
            </li>
        {% else %}
            <li class="disabled">
                <span>
                    Next &rarr;
                </span>
            </li>
        {% endif %}
    </ul>
{% endif %}

<script>
// var data1 = {{ record.idx|json_encode()|raw }};
// var data2 = {{ record.mem_id|json_encode()|raw }};
//console.log(data1);
var myVar = {{ records|json_encode()|raw }};
var URL = {{ detailsPage|page|json_encode()|raw }};
URL = URL.substring(0, URL.lastIndexOf('/')+1);
//var aa = {{ detailsUrlParameter|json_encode()|raw }};
//console.log(URL.substring(0, URL.lastIndexOf('/')+1));
console.log(URL);
//console.log(aa);
console.log(myVar['data']);

// var tabledata = [
//   {id: data1, name: data2 },
// ];
// var tabledata = [
// {id:1, name: "AAA", age:"12", col:"red", dob:""},
// {id:2, name:"Mary May", age:"1", col:"blue", dob:"14/05/1982"},
// {id:3, name:"Christine Lobowski", age:"42", col:"green", dob:"22/05/1982"},
// {id:4, name:"Brendon Philips", age:"125", col:"orange", dob:"01/08/1980"},
// {id:5, name:"Margret Marmajuke", age:"16", col:"yellow", dob:"31/01/1999"},
// ];
var dateFormatter = function(cell, formatterParams, onRendered) {
    //cell - the cell component
    //formatterParams - parameters set for the column
    //onRendered - function to call when the formatter has been rendered

    //convert date to JS date object
    var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
    d.setUTCSeconds(cell.getValue());

    //format date to YYYY-MM-DD
    var month = '' + (d.getMonth() + 1);
    var day = '' + d.getDate();
    var year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
};

var table = new Tabulator("#example-table", {
 	height:1100, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
 	data:myVar['data'], //assign data to table
 	layout:"fitColumns", //fit columns to width of table (optional)
  responsiveLayout:true, // enable responsive layouts
  movableRows:true,
  // pagination: "remote", //enable remote pagination
  // ajaxURL:"http://ljw1.innoi.kr/test2", //set url for ajax request
  // paginationDataSent:{
  //       "page":"idx", //change page request parameter to "pageNo"
  //   } ,
  paginationDataReceived:{
      "last_page":"max_pages", //change last_page parameter name to "max_pages"
  },
  paginationSize: 20, //optional parameter to request a certain number of rows per page
 	columns:[ //Define Table Columns
    {title:"번호", field:"idx", width:60},
	 	{title:"앱아이디", field:"mem_id", width:150},
	 	{title:"주문번호", field:"order_id"},
	 	{title:"추천인 아이디", field:"recom_id"},
	 	{title:"앱명", field:"app_name"},
    {title:"등록일", field:"reg_time", sorter:"date", align:"center", formatter:dateFormatter}
 	],
 	rowClick:function(e, row){ //trigger an alert message when the row is clicked
 		//alert("Row " + row.getData().id + " Clicked!!!!");
    location.href = URL + row.getData().idx;
 	},
});

//trigger download of data.xlsx file
$("#download-xlsx").click(function(){
    table.download("xlsx", "data.xlsx", {sheetName:"My Data"});
});
</script>